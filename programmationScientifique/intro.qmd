# Fondements de la programmation
Cette partie sert d'introduction au monde de la programmation en général, alors il ne sera pas question tout de suite de se concentrer sur Python. Nous verrons certains langages en survol, leurs différences, avantages et inconvénients. Pour bien programmer en science, il faut savoir ce qu'on fait. Pour savoir ce qu'on fait, il faut comprendre la base. On pourrait se lancer directement dans le langage Python sans cette partie, mais ce serait comme conduire une voiture sans avoir suivi de cours. On peut finir par se débrouiller en regardant les autres, mais si ce que font les autres n'est pas idéal ou encore si on rencontre un problème ou quelque chose de nouveau, cela peut mal se terminer. La programmation n'est peut-être pas aussi dangereuse que la conduite, mais il ne faut pas oublier que plusieurs outils modernes sont programmés par des gens et cela peut causer de graves dangers ou problèmes. Par exemple, si on programme mal un logiciel de radiographie ou de tomographe par émission de positrons, on peut soumettre un patient à une dose de rayons X ou gamma beaucoup trop élevée. Cet exemple est extrême, certes, mais il ne faut pas négliger l'importance de savoir ce qu'on fait.

## Qu'est-ce que la programmation?
La programmation est la construction d'instructions pour qu'un ordinateur puisse effectuer une tâche. On développe des algorithmes, soient les étapes nécessaires et la logique nécessaire, à l'aide de langages de programmation. Lorsqu'on écrit un programme, on utilise un langage de programmation qui permet de mettre en commun les briques nécessaires. Ces briques peuvent être nouvelles par le programmeur, mais aussi déjà existantes. Plusieurs langages offrent diverses sources d'algorithmes et autres objets, en plus de leur propre syntaxe de logique et d'écriture. On écrit essentiellement un texte qui sera ensuite *compris* par l'ordinateur selon un procéder de traduction quelconque, puis ce code machine sera exécuté par le ou les processeurs de l'ordinateur. Le processeur est un regroupement de puces et de circuits électroniques qui, lorsque soumis aux instructions, permettent des actions logiques et arithmétiques de base. On peut aditionner et soustraire, multiplier et diviser, comparer deux nombres ou encore enregistrer un nombre pour y avoir accès rapidement et le garder en mémoire. Les CPUs (*central processing unit*, soit l'unité centrale du processeur) modernes sont capable de faire séquentiellement des millions de ces petites opérations par seconde et à partir de ces opérations logiques et artithmétiques, on peut construire des programmes. Le rôle des langagas de programmation est de cacher ces instructions basiques à travers des instructions plus conviviales pour un humain. Ces instructions sont plus proche du langage naturel et sont en fait un regroupement de plusieurs instructions de base des processeurs. Par exemple, si on demande d'effectuer l'addition $2 + 1$, on demande à l'ordinateur de convertir les nombres impliqués en binaire (une suite de $0$ et $1$ qui, selon certaines règles bien définies, permet de représenter tout nombre décimal, entier ou non, en petites variations de courant à l'intérieur des circuits logiques de l'ordinateur), de stocker les nombres dans des petites cases mémoires temporaire (comme si on écrivait $2$ et $1$ sur une feuille de papier), d'additionner chaque bit (élément de la séquence binaire) entre les deux nombres, stocker la réponse et reconvertir en décimal. Cette suite d'instructions reste approximative bien sûr, mais montre que l'abstraction des langages de programmation enlève une grande quantité d'efforts, mais aussi de sources d'erreurs et de confusion. Il ne faut toutefois pas croire que la programmation sans ces étapes devient une marche dans le parc. Il en reste beaucoup à faire, mais ça devient pas mal plus lisible as accessible pour le commun des mortels.